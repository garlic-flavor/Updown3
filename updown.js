// Generated by CoffeeScript 2.4.1
(function() {
  var calcLength, getCrossOf, getDEM5AURLFromTileXY, getDEMURLFromTileXY, getDotOf, getHeightFromRGB, getNorthMagneticPole, getPointOnTileFromCoord, getRGBFromImg, getTileInfoFromURL, getTileXYFromCoord, makeSVG, normalize, subtract;

  makeSVG = function(data) {
    var $NS, $g, $path, $style, $svg, $text, SVGNS, d, graphMargin, graphSize, graphTopLeft, isUpper, j, k, len, len1, len2, len3, maxHeight, maxLength, minHeight, n, o, one, paperSize, posOnGraph, prevX, ref, ref1, ref2, scaleX, scaleY, x, xOnGraph, y, yOnGraph;
    // 定数
    paperSize = {
      x: 297,
      y: 210
    };
    graphSize = {
      x: 230,
      y: 160
    };
    graphTopLeft = {
      x: 30,
      y: 20
    };
    graphMargin = {
      top: 10,
      bottom: 10,
      left: 0,
      right: 10
    };
    SVGNS = "http://www.w3.org/2000/svg";
    // 情報
    maxLength = 0;
    minHeight = 99999;
    maxHeight = -99999;
    scaleX = 1;
    scaleY = 1;
    // Suger
    $NS = function(elementName) {
      return $(document.createElementNS(SVGNS, elementName));
    };
    $path = function(type, data) {
      var $p, d, idx, j, len1, one;
      $p = $NS("path");
      d = "";
      for (idx = j = 0, len1 = data.length; j < len1; idx = ++j) {
        one = data[idx];
        if (idx === 0) {
          d += "M";
        }
        d += one.x + "," + one.y + " ";
        if (idx === 0) {
          d += "L";
        }
      }
      $p.attr({
        class: type,
        d: d
      });
      return $p;
    };
    $text = function(type, pos, anchor, str) {
      var $t;
      $t = $NS("text");
      $t.attr({
        class: type,
        x: pos.x,
        y: pos.y
      });
      switch (anchor) {
        case "N":
          $t.css({
            "text-anchor": "middle"
          });
          break;
        case "E":
          $t.css({
            "text-anchor": "start",
            "dominant-baseline": "central"
          });
          break;
        case "SW":
          $t.css({
            "text-anchor": "end",
            "dominant-baseline": "hanging"
          });
          break;
        case "S":
          $t.css({
            "text-anchor": "middle",
            "dominant-baseline": "hanging"
          });
          break;
        case "W":
          $t.css({
            "text-anchor": "end",
            "dominant-baseline": "central"
          });
      }
      $t.text(str);
      return $t;
    };
    xOnGraph = function(x) {
      return graphTopLeft.x + graphMargin.left + x * scaleX;
    };
    yOnGraph = function(y) {
      return graphTopLeft.y + graphSize.y - graphMargin.bottom - (y - minHeight) * scaleY;
    };
    posOnGraph = function(p) {
      return {
        x: xOnGraph(p.x),
        y: yOnGraph(p.y)
      };
    };
    //#--------------------------------------------------------------------
    // データ解析
    maxLength = data[data.length - 1].x;
    for (j = 0, len1 = data.length; j < len1; j++) {
      one = data[j];
      if (one.y < minHeight) {
        minHeight = one.y;
      }
      if (maxHeight < one.y) {
        maxHeight = one.y;
      }
    }
    scaleX = (graphSize.x - graphMargin.left - graphMargin.right) / maxLength;
    scaleY = (graphSize.y - graphMargin.top - graphMargin.bottom) / (maxHeight - minHeight);
    //#--------------------------------------------------------------------
    // 描画
    //#--------------------------------------------------------------------
    $svg = $NS("svg");
    $svg.attr({
      xmlns: SVGNS,
      version: "1.1",
      height: paperSize.y + "mm",
      width: paperSize.x + "mm",
      viewBox: "0 0 " + paperSize.x + " " + paperSize.y
    });
    $style = $("<style>");
    $style.text(".data { fill:none; stroke:#000000; stroke-width:0.2; stroke-linecap:butt; stroke-linejoin: miter; stroke-opacity:1; } .bg { fill: white; stroke: none; } .frame { fill:none; stroke:#000000; stroke-width:0.5; stroke-linecap:butt; stroke-linejoin: miter; stroke-opacity:1; } .scale { font-size:3.5pt; fill:#000000; } .label { font-size:4pt; fill:#000000; } .label-guide { fill:none; stroke:#808080; stroke-width:0.2; stroke-opacity:1; }");
    $svg.append($style);
    $g = $NS("g");
    $svg.append($g);
    //#--------------------------------------------------------------------
    // 外枠
    $g.append($path("bg", [
      {
        x: 0,
        y: 0
      },
      {
        x: 0,
        y: paperSize.y
      },
      {
        x: paperSize.x,
        y: paperSize.y
      },
      {
        x: paperSize.x,
        y: 0
      },
      {
        x: 0,
        y: 0
      }
    ]));
    // Lの字
    $g.append($path("frame", [
      {
        x: graphTopLeft.x,
        y: graphTopLeft.y
      },
      {
        x: graphTopLeft.x,
        y: graphTopLeft.y + graphSize.y
      },
      {
        x: graphTopLeft.x + graphSize.x,
        y: graphTopLeft.y + graphSize.y
      }
    ]));
    // 左上
    $g.append($text("scale", graphTopLeft, "N", "標高(m)"));
    // 右下
    $g.append($text("scale", {
      x: graphTopLeft.x + graphSize.x,
      y: graphTopLeft.y + graphSize.y
    }, "E", "距離(km)"));
    // 左下
    $g.append($text("scale", {
      x: graphTopLeft.x,
      y: graphTopLeft.y + graphSize.y
    }, "SW", ((scaleY / scaleX).toFixed(1)) + ":1"));
// 距離目盛
    for (len = k = 1000, ref = maxLength; k <= ref; len = k += 1000) {
      x = xOnGraph(len);
      y = graphTopLeft.y + graphSize.y;
      if ((len % 5000) === 0) {
        $g.append($path("frame", [
          {
            x: x,
            y: y
          },
          {
            x: x,
            y: y + 5
          }
        ]));
        $g.append($text("scale", {
          x: x,
          y: y + 5
        }, "S", len / 1000));
      } else {
        $g.append($path("frame", [
          {
            x: x,
            y: y
          },
          {
            x: x,
            y: y + 2
          }
        ]));
      }
    }
    // 全距離
    x = xOnGraph(maxLength);
    y = graphTopLeft.y + graphSize.y;
    $g.append($path("frame", [
      {
        x: x,
        y: y
      },
      {
        x: x,
        y: y + 5
      }
    ]));
    $g.append($text("scale", {
      x: x,
      y: y + 5
    }, "S", (maxLength / 1000).toFixed(1)));
// 標高目盛
    for (len = n = ref1 = minHeight + 100, ref2 = maxHeight; n <= ref2; len = n += 100) {
      len2 = len - (len % 100);
      x = graphTopLeft.x;
      y = yOnGraph(len2);
      $g.append($path("frame", [
        {
          x: x - 5,
          y: y
        },
        {
          x: x,
          y: y
        }
      ]));
      $g.append($text("scale", {
        x: x - 5,
        y: y
      }, "W", len2));
    }
    // 最低標高
    x = graphTopLeft.x;
    y = yOnGraph(minHeight);
    $g.append($path("frame", [
      {
        x: x - 5,
        y: y
      },
      {
        x: x,
        y: y
      }
    ]));
    $g.append($text("scale", {
      x: x - 5,
      y: y
    }, "W", minHeight.toFixed(0)));
    // 最高標高
    y = yOnGraph(maxHeight);
    $g.append($path("frame", [
      {
        x: x - 5,
        y: y
      },
      {
        x: x,
        y: y
      }
    ]));
    $g.append($text("scale", {
      x: x - 5,
      y: y
    }, "W", maxHeight.toFixed(0)));
    //#--------------------------------------------------------------------
    // UP-DOWN
    $g.append($path("data", (function() {
      var len3, o, results;
      results = [];
      for (o = 0, len3 = data.length; o < len3; o++) {
        one = data[o];
        results.push(posOnGraph(one));
      }
      return results;
    })()));
    //#--------------------------------------------------------------------
    // ラベル
    prevX = 0;
    isUpper = true;
    for (o = 0, len3 = data.length; o < len3; o++) {
      one = data[o];
      if (0 < one.label.length) {
        x = xOnGraph(one.x);
        if (((x - prevX) < 10) === isUpper) {
          d = 10;
          isUpper = false;
        } else {
          d = -10;
          isUpper = true;
        }
        y = yOnGraph(one.y);
        $g.append($path("label-guide", [
          {
            x: x,
            y: y
          },
          {
            x: x,
            y: y + d
          }
        ]));
        $g.append($text("label", {
          x: x,
          y: y + d
        }, (isUpper ? "N" : "S"), one.label));
        prevX = x;
      }
    }
    return $svg; // makeSVG()の戻り値
  };

  //#==============================================================================
  // 磁北点を得る。
  getNorthMagneticPole = function() {
    return L.latLng(86.5, -172.6);
  };

  // 長さ
  calcLength = function(p) {
    return Math.sqrt(p.x * p.x + p.y * p.y);
  };

  // 正規化
  normalize = function(p) {
    var l;
    l = calcLength(p);
    return L.point(p.x / l, p.y / l);
  };

  // 引き算
  subtract = function(p1, p2) {
    return L.point(p1.x - p2.x, p1.y - p2.y);
  };

  // 内積
  getDotOf = function(p1, p2) {
    return p1.x * p2.x + p1.y * p2.y;
  };

  // 外積
  getCrossOf = function(p1, p2) {
    return p1.x * p2.y - p1.y * p2.x;
  };

  // 全タイル内での位置から、現在のタイル位置を得る。
  getTileXYFromCoord = function(p) {
    return L.point(Math.floor(p.x / 256), Math.floor(p.y / 256));
  };

  // 全タイル内での位置から、現在のタイル左上を原点とする位置に変換する。
  getPointOnTileFromCoord = function(p) {
    return new L.Point(Math.floor(p.x % 256), Math.floor(p.y % 256));
  };

  // タイル位置から、標高タイル画像のURLを得る。
  getDEM5AURLFromTileXY = function(p) {
    return `https://cyberjapandata.gsi.go.jp/xyz/dem5a_png/15/${p.x}/${p.y}.png`;
  };

  // タイル位置から、標高タイル画像のURLを得る。
  getDEMURLFromTileXY = function(p, zoom) {
    if ((0 <= zoom && zoom <= 14)) {
      return `https://cyberjapandata.gsi.go.jp/xyz/dem_png/${zoom}/${p.x}/${p.y}.png`;
    } else {
      return `https://cyberjapandata.gsi.go.jp/xyz/dem5a_png/15/${p.x}/${p.y}.png`;
    }
  };

  // URLからタイル情報を得る。
  getTileInfoFromURL = function(url) {
    return JSON.parse(url.replace(/.*\/(\d+)\/(\d+)\/(\d+)\.png$/, '{"zoom":$1, "x":$2, "y":$3}'));
  };

  // RGBデータから標高を得る。(単位はm)
  getHeightFromRGB = function(rgb) {
    var x;
    x = (rgb[0] << 16) + (rgb[1] << 8) + rgb[2];
    if (x < (1 << 23)) {
      return x * 0.01;
    } else if ((1 << 23) < x) {
      return (x - 1 << 24) * 0.01;
    } else {
      return Number.NaN;
    }
  };

  // img要素から p の位置のRGBデータを得る。
  getRGBFromImg = function(canvas, p) {
    return canvas.getContext('2d').getImageData(p.x, p.y, 1, 1).data;
  };

  //#==============================================================================
  $(function() {
    var $store, clearAll, createMarkerAt, getAllData, getAllHeights, getCoordFromLatLng, getHeightFromLatLng, getTrueHeight, helpPhase, helpProgress, loadImage, map, markers, polyline, resetDefaultLocation, storage, updatePolyLine, visibleOnMap;
    // 説明画面
    storage = localStorage;
    helpPhase = storage.getItem("helpPhase");
    helpProgress = function(e) {
      var $img;
      if (4 < helpPhase) {
        storage.setItem("helpPhase", helpPhase);
        return $("#help").hide();
      } else if (0 < helpPhase) {
        $img = $("<img>");
        $img.attr("src", "./img/help" + helpPhase + ".jpg");
        $("#help").empty().append($img);
        return helpPhase++;
      } else {
        $("#js-caution").empty().text("クリックで使い方を説明します。");
        return helpPhase = 1;
      }
    };
    $("#help").on("click", helpProgress);
    helpProgress();
    // マップの初期化
    map = L.map("map");
    $store = $("#store");
    // マップを初期状態にする。
    resetDefaultLocation = function() {
      return map.setView([34.64302, 135], 5);
    };
    // 緯度軽度からピクセル値を得る。(原点は最左上タイルの左上。)
    getCoordFromLatLng = function(latlng, zoom) {
      if ((0 < zoom && zoom <= 14)) {
        return map.project(latlng, zoom);
      } else {
        return map.project(latlng, 15);
      }
    };
    // タイルが現在の map上で見えているか。
    visibleOnMap = function(tile) {
      var br, mapB, ref, ref1, tl;
      mapB = map.getBounds();
      tl = getTileXYFromCoord(getCoordFromLatLng(mapB.getNorthWest(), tile.zoom));
      br = getTileXYFromCoord(getCoordFromLatLng(mapB.getSouthEast(), tile.zoom));
      return (tl.x <= (ref = tile.x) && ref <= br.x) && (tl.y <= (ref1 = tile.y) && ref1 <= br.y);
    };
    // urlの画像を読み込み、cb(img)を呼び出す。
    loadImage = function(z, url, cb, errorcb) {
      var $can, $img;
      $can = $store.children('canvas[src="' + url + '"]');
      if (0 < $can.length) {
        // console.log "do recycle #{url}"
        return cb($can[0]);
      } else {
        // console.log "start loading of #{url}"
        $img = $("<img>");
        $img.attr("crossOrigin", "Anonymous");
        $img.on("load", function(e) {
          var ctx, img;
          // console.log "load completed"
          img = e.target;
          $can = $("<canvas>");
          $can.attr("width", img.width);
          $can.attr("height", img.height);
          $can.attr("src", img.src);
          ctx = $can[0].getContext('2d');
          ctx.drawImage(img, 0, 0);
          $store.append($can);
          return cb($can[0]);
        });
        $img.on("error", errorcb);
        $img.attr("src", url);
        // 古いのを削除する。
        return $store.children('canvas').each(function(idx) {
          var $t, u;
          $t = $(this);
          u = $t.attr("src");
          if (!visibleOnMap(getTileInfoFromURL(u))) {
            return $t.remove();
          }
        });
      }
    };
    // $tt = $t.remove() if not visibleOnMap getTileInfoFromURL u
    // if $tt?
    //     console.log "removing of " + $tt.attr "src"
    // true
    //#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    // 緯度軽度から標高を得る。
    getHeightFromLatLng = function(latlng, zoom, cb) {
      var coord, p, url;
      coord = getCoordFromLatLng(latlng, zoom);
      url = getDEMURLFromTileXY(getTileXYFromCoord(coord), zoom);
      p = getPointOnTileFromCoord(coord);
      return loadImage(zoom, url, function(canvas) {
        var h;
        h = getHeightFromRGB(getRGBFromImg(canvas, p));
        if (isNaN(h) && zoom === 15) {
          return getHeightFromLatLng(latlng, 14, cb);
        } else {
          return cb(h);
        }
      }, function(e) { // 失敗したら10mBメッシュで取り直し。
        if (zoom < 15) {
          return cb(Number.NaN);
        } else {
          return getHeightFromLatLng(latlng, 14, cb);
        }
      });
    };
    // マップ右下のリンクを出す。
    L.tileLayer('https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png', {
      attribution: '<a href="https://maps.gsi.go.jp/development/ichiran.html" target="_blank">地理院タイル</a>',
      maxZoom: 18
    }).addTo(map);
    // 日本を表示する。
    resetDefaultLocation();
    // マーカー
    markers = [];
    // マーカーの作成
    createMarkerAt = function(latlng) {
      var $cont, m;
      $cont = $("<div><input class='title'></title><br> 緯度軽度: <span class='latlng'></span><br> 標高: <span class='height'></span><br> 標高(実際):<input class='trueheight'></input>m<br> <button>削除</button></div>");
      m = L.marker(latlng, {
        riseOnHover: true,
        draggable: true
      }).bindPopup($cont[0]).on('click', function(e) {
        var ll;
        ll = this.getLatLng();
        m = this;
        return getHeightFromLatLng(ll, map.getZoom(), function(h) {
          var $p;
          $p = $(m.getPopup().getContent());
          $p.find("span.latlng").text(`${ll.lat.toFixed(2)}, ${ll.lng.toFixed(2)}`);
          $p.find("span.height").text(h.toFixed(2));
          m.openPopup();
          $p.find("input.title").focus();
          return $p.find("input").on("keyup", function(e) {
            if (e.keyCode === 0x0d || e.keyCode === 0x1b) {
              m.closePopup();
              return e.preventDefault();
            }
          });
        });
      }).on('drag', function(e) {
        return updatePolyLine();
      }).on('dragstart', function(e) {
        var j, len1, one, results;
        results = [];
        for (j = 0, len1 = markers.length; j < len1; j++) {
          one = markers[j];
          if (one !== this) {
            results.push(one.setOpacity(0.3));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }).on('dragend', function(e) {
        var j, len1, one, results;
        results = [];
        for (j = 0, len1 = markers.length; j < len1; j++) {
          one = markers[j];
          results.push(one.setOpacity(1.0));
        }
        return results;
      }).addTo(map);
      $cont.find("button").on("click", function(e) {
        markers = markers.filter((one) => {
          return one !== m;
        });
        updatePolyLine();
        return m.remove();
      });
      return m;
    };
    // 地図上のクリックイベント
    map.on('click', function(e) {
      var m;
      if (helpPhase < 5) {
        helpPhase = 5;
        helpProgress();
      }
      m = createMarkerAt(e.latlng);
      markers.push(m);
      return updatePolyLine();
    });
    // ルートの赤い線
    polyline = L.polyline([], {
      color: 'red'
    }).addTo(map).on('click', function(e) {
      var crossBorder, idx, j, len1, m, nv21, nv31, one, p1, p2, p3, v21, v31;
      p2 = map.project(e.latlng);
      crossBorder = 18 / (map.getZoom() + 1);
      for (idx = j = 0, len1 = markers.length; j < len1; idx = ++j) {
        one = markers[idx];
        if (markers.length <= idx + 1) {
          break;
        }
        p1 = map.project(one.getLatLng());
        p3 = map.project(markers[idx + 1].getLatLng());
        v21 = subtract(p2, p1);
        v31 = subtract(p3, p1);
        nv21 = normalize(v21);
        nv31 = normalize(v31);
        if (calcLength(v21) < calcLength(v31) && 0 < getDotOf(v21, v31) && Math.abs(getCrossOf(nv31, nv21)) < crossBorder) {
          m = createMarkerAt(e.latlng);
          markers.splice(idx + 1, 0, m);
          updatePolyLine();
          break;
        }
      }
      return L.DomEvent.stopPropagation(e);
    });
    // ルートの更新
    updatePolyLine = function() {
      return polyline.setLatLngs(markers.map((m) => {
        return m.getLatLng();
      }));
    };
    // UIの設定
    $("#menu").hide();
    $("#openButton").on("click", function(e) {
      $(this).hide();
      return $("#menu").show();
    });
    $("#closeButton").on("click", function(e) {
      $("#menu").hide();
      return $("#openButton").show();
    });
    
    getTrueHeight = function(m) {
      return parseFloat($(m.getPopup().getContent()).find("input.trueheight").val());
    };
    
    getAllHeights = function(cb) {
      var $bar, heights, proc, progress, requestNext;
      heights = [];
      progress = 0;
      $bar = $("#progressbar");
      $bar.attr({
        max: markers.length,
        value: 0
      });
      $bar.removeClass("hide");
      requestNext = function() {
        var th;
        if (progress < markers.length) {
          th = getTrueHeight(markers[progress]);
          if (!isNaN(th)) {
            return proc(th);
          } else {
            return getHeightFromLatLng(markers[progress].getLatLng(), 15, proc);
          }
        } else {
          $bar.addClass("hide");
          return cb(heights);
        }
      };
      proc = function(h) {
        heights.push(h);
        ++progress;
        $bar.attr("value", progress);
        return requestNext();
      };
      return requestNext();
    };
    
    clearAll = function() {
      var j, len1, one;
      for (j = 0, len1 = markers.length; j < len1; j++) {
        one = markers[j];
        one.remove();
      }
      markers = [];
      updatePolyLine();
      return $("#svgcanvas").empty();
    };
    
    getAllData = function(cb) {
      return getAllHeights(function(heights) {
        var data, dists, i, idx, j, k, len1, len3, one, walklength;
        walklength = 0;
        dists = [];
        for (idx = j = 0, len1 = markers.length; j < len1; idx = ++j) {
          one = markers[idx];
          if (idx === 0) {
            dists.push(0);
          } else {
            walklength += markers[idx - 1].getLatLng().distanceTo(one.getLatLng());
            dists.push(walklength);
          }
        }
        data = [];
        for (i = k = 0, len3 = markers.length; k < len3; i = ++k) {
          one = markers[i];
          data.push({
            x: dists[i],
            y: heights[i],
            label: $(one.getPopup().getContent()).find("input.title").val()
          });
        }
        return cb(data);
      });
    };
    $("#createData").on("click", function(e) {
      var $c, data, j, len1, m, p, sel;
      sel = ($("#dataFormat"))[0];
      switch (sel.options[sel.selectedIndex].value) {
        case "CSV":
          return getAllData(function(data) {
            var j, len1, one, str;
            str = "";
            for (j = 0, len1 = data.length; j < len1; j++) {
              one = data[j];
              str += one.x.toFixed(2) + ", " + one.y.toFixed(2) + ", " + one.label + "\r\n";
            }
            return $("#dataOutput").val(str);
          });
        case "JSON":
          data = [];
          for (j = 0, len1 = markers.length; j < len1; j++) {
            m = markers[j];
            p = m.getLatLng();
            $c = $(m.getPopup().getContent());
            data.push({
              lat: p.lat,
              lng: p.lng,
              title: $c.find("input.title").val(),
              trueHeight: Number($c.find("input.trueheight").val())
            });
          }
          return $("#dataOutput").val(JSON.stringify(data));
        case "SVG":
          $("#svgcanvas").empty();
          return getAllData(function(data) {
            $("#svgcanvas").append(makeSVG(data));
            return $("#dataOutput").val('<?xml version="1.0" encoding="UTF-8"?>' + $("#svgcanvas").html());
          });
      }
    });
    $("#clearAll").on("click", function(e) {
      return clearAll();
    });
    $("#loadData").on("click", function(e) {
      var $c, data, j, len1, m, ref;
      clearAll();
      ref = JSON.parse($("#dataOutput").val());
      for (j = 0, len1 = ref.length; j < len1; j++) {
        data = ref[j];
        m = createMarkerAt(L.latLng(data.lat, data.lng));
        $c = $(m.getPopup().getContent());
        $c.find("input.title").val(data.title);
        $c.find("input.trueheight").val(data.trueHeight);
        markers.push(m);
      }
      return updatePolyLine();
    });
    return $("#showHelp").on("click", function(e) {
      $("#help").show();
      helpPhase = 1;
      return helpProgress();
    });
  });

}).call(this);
