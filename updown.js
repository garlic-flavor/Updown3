// Generated by CoffeeScript 2.4.1
(function() {
  // [{x: 距離, y: 標高, label: ラベル, inc: 傾斜}, ...]からSVGを出力する。
  // jQueryを利用する。
  var EARTH_CIRCLE, EARTH_RADIUS, MAP_SIZE, TO_RADIAN, calcLength, createMap, getCrossOf, getDEM5AURLFromTileXY, getDEMURLFromTileXY, getDotOf, getHeightFromRGB, getIncFromImg, getLengthOfPixel, getPointOnTileFromCoord, getRGBFromImg, getTileInfoFromURL, getTileXYFromCoord, makeSVG, makeSVGfile, needsHelp, nomoreHelp, normalize;

  makeSVG = function(data) {
    var $NS, $g, $path, $svg, $text, SVGNS, d, graphMargin, graphSize, graphTopLeft, incOnGraph, incPosOnGraph, isUpper, j, k, len, len1, len2, len3, maxHeight, maxLength, maxX, maxY, minHeight, minY, n, one, paperSize, posOnGraph, prevX, q, ref, ref1, ref2, scaleX, scaleY, x, xOnGraph, y, yOnGraph;
    // 定数
    paperSize = {
      x: 297,
      y: 210 // in mm. A4
    };
    graphSize = {
      x: 230,
      y: 160
    };
    graphTopLeft = {
      x: 30,
      y: 20
    };
    graphMargin = {
      top: 10,
      bottom: 10,
      left: 0,
      right: 10
    };
    SVGNS = "http://www.w3.org/2000/svg";
    // 情報
    maxLength = 0;
    minHeight = 99999;
    maxHeight = -99999;
    scaleX = 1;
    scaleY = 1;
    // Suger
    // SVGの名前空間でDOM要素を作る。
    $NS = function(elementName, attr) {
      var $elem;
      $elem = $(document.createElementNS(SVGNS, elementName));
      if (attr != null) {
        return $elem.attr(attr);
      } else {
        return $elem;
      }
    };
    // SVGの<path>要素を作る。
    $path = function(type, data) {
      var i, o;
      return $NS("path", {
        class: type,
        d: ((function() {
          var j, len1, results;
          results = [];
          for (i = j = 0, len1 = data.length; j < len1; i = ++j) {
            o = data[i];
            results.push(i === 0 ? `M${o.x},${o.y} L` : `${o.x},${o.y} `);
          }
          return results;
        })()).join("")
      });
    };
    // SVGの<text>要素を作る。
    $text = function(type, pos, anchor, str) {
      var $t;
      $t = $NS("text", {
        class: type,
        x: pos.x,
        y: pos.y
      });
      switch (anchor) {
        case "E":
          $t.css({
            "text-anchor": "start",
            "dominant-baseline": "central"
          });
          break;
        case "SW":
          $t.css({
            "text-anchor": "end",
            "dominant-baseline": "hanging"
          });
          break;
        case "S":
          $t.css({
            "text-anchor": "middle",
            "dominant-baseline": "hanging"
          });
          break;
        case "W":
          $t.css({
            "text-anchor": "end",
            "dominant-baseline": "central" // "N"
          });
          break;
        default:
          $t.css({
            "text-anchor": "middle"
          });
      }
      return $t.text(str);
    };
    // dataの値をSVG内での位置に変換する。
    xOnGraph = function(x) {
      return graphTopLeft.x + graphMargin.left + x * scaleX;
    };
    yOnGraph = function(y) {
      return graphTopLeft.y + graphSize.y - graphMargin.bottom - (y - minHeight) * scaleY;
    };
    // 傾斜の変換
    incOnGraph = function(inc) {
      return graphTopLeft.y + graphSize.y - graphMargin.bottom - inc * inc * 40;
    };
    posOnGraph = function(p) {
      return {
        x: xOnGraph(p.x),
        y: yOnGraph(p.y)
      };
    };
    incPosOnGraph = function(p) {
      return {
        x: xOnGraph(p.x),
        y: incOnGraph(p.inc)
      };
    };
    //#--------------------------------------------------------------------
    // データ解析
    maxLength = data[data.length - 1].x;
    for (j = 0, len1 = data.length; j < len1; j++) {
      one = data[j];
      if (one.y < minHeight) {
        minHeight = one.y;
      }
      if (maxHeight < one.y) {
        maxHeight = one.y;
      }
    }
    scaleX = (graphSize.x - graphMargin.left - graphMargin.right) / maxLength;
    scaleY = (graphSize.y - graphMargin.top - graphMargin.bottom) / (maxHeight - minHeight);
    //#--------------------------------------------------------------------
    // 描画
    //#--------------------------------------------------------------------
    $svg = $NS("svg", {
      xmlns: SVGNS,
      version: "1.1",
      height: paperSize.y + "mm",
      width: paperSize.x + "mm",
      viewBox: "0 0 " + paperSize.x + " " + paperSize.y
    });
    $("<style>").text(".data { fill:none; stroke:#000000; stroke-width:0.4; stroke-linecap:butt; stroke-linejoin: miter; stroke-opacity:1; } .inc { fill:none; stroke:#ff0000; stroke-width:0.4; stroke-linecap:butt; stroke-linejoin: miter; stroke-opacity:1; } .bg { fill: white; stroke: none; } .frame { fill:none; stroke:#000000; stroke-width:0.8; stroke-linecap:butt; stroke-linejoin: miter; stroke-opacity:1; } .scale { font-size:3.5pt; fill:#000000; } .label { font-size:4pt; fill:#000000; } .label-guide { fill:none; stroke:#808080; stroke-width:0.2; stroke-opacity:1; }").appendTo($svg);
    // レイヤー1
    $g = $NS("g").appendTo($svg);
    //#--------------------------------------------------------------------
    // 外枠
    $g.append($path("bg", [
      {
        x: 0,
        y: 0
      },
      {
        x: 0,
        y: paperSize.y
      },
      {
        x: paperSize.x,
        y: paperSize.y
      },
      {
        x: paperSize.x,
        y: 0
      },
      {
        x: 0,
        y: 0
      }
    ]));
    // Lの字
    $g.append($path("frame", [
      {
        x: graphTopLeft.x,
        y: graphTopLeft.y
      },
      {
        x: graphTopLeft.x,
        y: graphTopLeft.y + graphSize.y
      },
      {
        x: graphTopLeft.x + graphSize.x,
        y: graphTopLeft.y + graphSize.y
      }
    ]));
    // 左上(標高)
    $g.append($text("scale", graphTopLeft, "N", "標高(m)"));
    // 右下(水平距離)
    $g.append($text("scale", {
      x: graphTopLeft.x + graphSize.x,
      y: graphTopLeft.y + graphSize.y
    }, "E", "距離(km)"));
    // 左下(倍率)
    $g.append($text("scale", {
      x: graphTopLeft.x,
      y: graphTopLeft.y + graphSize.y
    }, "SW", ((scaleY / scaleX).toFixed(1)) + ":1"));
    // 全距離
    x = xOnGraph(maxLength);
    y = graphTopLeft.y + graphSize.y;
    $g.append($path("frame", [
      {
        x: x,
        y: y
      },
      {
        x: x,
        y: y + 5
      }
    ]));
    $g.append($text("scale opaque", {
      x: x,
      y: y + 5
    }, "S", (maxLength / 1000).toFixed(1)));
    maxX = x;
    for (len = k = 1000, ref = maxLength; k <= ref; len = k += 1000) {
      x = xOnGraph(len);
      y = graphTopLeft.y + graphSize.y;
      if ((len % 5000) === 0 && 10 < (maxX - x)) {
        $g.append($path("frame", [
          {
            x: x,
            y: y
          },
          {
            x: x,
            y: y + 5
          }
        ]));
        $g.append($text("scale", {
          x: x,
          y: y + 5
        }, "S", len / 1000));
      } else {
        $g.append($path("frame", [
          {
            x: x,
            y: y
          },
          {
            x: x,
            y: y + 2
          }
        ]));
      }
    }
    // 最低標高
    x = graphTopLeft.x;
    y = yOnGraph(minHeight);
    $g.append($path("frame", [
      {
        x: x - 5,
        y: y
      },
      {
        x: x,
        y: y
      }
    ]));
    $g.append($text("scale opaque", {
      x: x - 5,
      y: y
    }, "W", minHeight.toFixed(0)));
    minY = y;
    y = yOnGraph(maxHeight);
    $g.append($path("frame", [
      {
        x: x - 5,
        y: y
      },
      {
        x: x,
        y: y
      }
    ]));
    $g.append($text("scale opaque", {
      x: x - 5,
      y: y
    }, "W", maxHeight.toFixed(0)));
    maxY = y;
    for (len = n = ref1 = minHeight + 100, ref2 = maxHeight + 100; n <= ref2; len = n += 100) {
      len2 = len - (len % 100);
      x = graphTopLeft.x;
      y = yOnGraph(len2);
      $g.append($path("frame", [
        {
          x: x - 5,
          y: y
        },
        {
          x: x,
          y: y
        }
      ]));
      if (5 < (minY - y) && 5 < (y - maxY)) {
        $g.append($text("scale", {
          x: x - 5,
          y: y
        }, "W", len2));
      }
    }
    //#--------------------------------------------------------------------
    // 傾斜
    $g.append($path("inc", (function() {
      var len3, q, results;
      results = [];
      for (q = 0, len3 = data.length; q < len3; q++) {
        one = data[q];
        results.push(incPosOnGraph(one));
      }
      return results;
    })()));
    //#--------------------------------------------------------------------
    // UP-DOWN
    $g.append($path("data", (function() {
      var len3, q, results;
      results = [];
      for (q = 0, len3 = data.length; q < len3; q++) {
        one = data[q];
        results.push(posOnGraph(one));
      }
      return results;
    })()));
    //#--------------------------------------------------------------------
    // ラベル
    prevX = 0;
    isUpper = true;
    for (q = 0, len3 = data.length; q < len3; q++) {
      one = data[q];
      if (0 < one.label.length) {
        x = xOnGraph(one.x);
        if (((x - prevX) < 10) === isUpper) {
          d = 10;
          isUpper = false;
        } else {
          d = -10;
          isUpper = true;
        }
        y = yOnGraph(one.y);
        $g.append($path("label-guide", [
          {
            x: x,
            y: y
          },
          {
            x: x,
            y: y + d
          }
        ]));
        $g.append($text("label", {
          x: x,
          y: y + d
        }, (isUpper ? "N" : "S"), one.label));
        prevX = x;
      }
    }
    return $svg; // makeSVG()の戻り値
  };

  
  //#------------------------------------------------------------------------------
  // SVG要素からSVGファイルを構成する文字列を作る。
  makeSVGfile = function(svg) {
    return '<?xml version="1.0" encoding="UTF-8"?>' + $(svg).html();
  };

  //#==============================================================================
  //# jQuery使わない系関数

  // 地球の半径(m)(赤道の値。ただし、ここで地球は正円と近似する。)
  // https://ja.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E5%8D%8A%E5%BE%84
  EARTH_RADIUS = 6378136.6;

  // 地球の円周
  EARTH_CIRCLE = EARTH_RADIUS * 2 * Math.PI;

  // degree to radian
  TO_RADIAN = Math.PI / 180;

  // あるズームレベルにおけるマップの全サイズ(ピクセル)
  MAP_SIZE = function(z) {
    return 256 * (2 ** z);
  };

  // 指定のズームレベル、緯度で1pixelが何メートルになるか。
  getLengthOfPixel = function(zoom, lat) {
    return EARTH_CIRCLE * Math.cos(lat * TO_RADIAN) / MAP_SIZE(zoom);
  };

  // 長さ
  calcLength = function(p) {
    return Math.sqrt(p.x * p.x + p.y * p.y);
  };

  // 正規化
  normalize = function(p) {
    var l;
    l = calcLength(p);
    return L.point(p.x / l, p.y / l);
  };

  // 内積
  getDotOf = function(p1, p2) {
    return p1.x * p2.x + p1.y * p2.y;
  };

  // 外積
  getCrossOf = function(p1, p2) {
    return p1.x * p2.y - p1.y * p2.x;
  };

  // 全タイル内での位置から、現在のタイル位置を得る。
  getTileXYFromCoord = function(p) {
    return L.point(Math.floor(p.x / 256), Math.floor(p.y / 256));
  };

  // 全タイル内での位置から、現在のタイル左上を原点とする位置に変換する。
  getPointOnTileFromCoord = function(p) {
    return new L.Point(Math.floor(p.x % 256), Math.floor(p.y % 256));
  };

  // タイル位置から、標高タイル画像のURLを得る。
  getDEM5AURLFromTileXY = function(p) {
    return `https://cyberjapandata.gsi.go.jp/xyz/dem5a_png/15/${p.x}/${p.y}.png`;
  };

  // タイル位置から、標高タイル画像のURLを得る。
  getDEMURLFromTileXY = function(p, zoom) {
    if ((0 <= zoom && zoom <= 14)) {
      return `https://cyberjapandata.gsi.go.jp/xyz/dem_png/${zoom}/${p.x}/${p.y}.png`;
    } else {
      return `https://cyberjapandata.gsi.go.jp/xyz/dem5a_png/15/${p.x}/${p.y}.png`;
    }
  };

  // URLからタイル情報を得る。
  getTileInfoFromURL = function(url) {
    return JSON.parse(url.replace(/.*\/(\d+)\/(\d+)\/(\d+)\.png$/, '{"zoom":$1, "x":$2, "y":$3}'));
  };

  // RGBデータから標高を得る。(単位はm)
  getHeightFromRGB = function(rgb) {
    var x;
    x = (rgb[0] << 16) + (rgb[1] << 8) + rgb[2];
    if (x < (1 << 23)) {
      return x * 0.01;
    } else if ((1 << 23) < x) {
      return (x - 1 << 24) * 0.01;
    } else {
      return Number.NaN;
    }
  };

  // canvas要素から p の位置のRGBデータを得る。
  getRGBFromImg = function(canvas, p) {
    return canvas.getContext('2d').getImageData(p.x, p.y, 1, 1).data;
  };

  // canvas要素から p の位置の傾斜情報を得る。
  getIncFromImg = function(canvas, p, zoom, lat) {
    var data, h, i, j, max, min, ref, truncatedRatio;
    data = canvas.getContext('2d').getImageData(p.x - 1, p.y - 1, 3, 3).data;
    max = -999999;
    min = 999999;
    truncatedRatio = 1; // 画像端の場合の調整
    for (i = j = 0, ref = data.length; j <= ref; i = j += 4) {
      if (data[i + 3] === 0) { // 透明ピクセルは範囲外
        truncatedRatio = 2;
        continue;
      }
      h = getHeightFromRGB(data.slice(i));
      if (max < h) {
        max = h;
      }
      if (h < min) {
        min = h;
      }
    }
    if (max <= min) {
      return 0;
    } else {
      return (max - min) * truncatedRatio / 2 / getLengthOfPixel(zoom, lat);
    }
  };

  // local storage
  needsHelp = function(e) {
    return !localStorage.getItem("secondInvocation");
  };

  nomoreHelp = function(e) {
    return localStorage.setItem("secondInvocation", true);
  };

  //#==============================================================================
  // Leaflet ラッパ。jQueryを利用します。
  // 国土地理院地図を利用し、日本を表示します。
  // データ書式
  // { lat: 緯度, lng: 経度, x: 距離, y: 標高, label: ラベル, inc: 傾斜 }
  // inc は付近の等高線のつまり具合の指標を表す。

  createMap = function(store, progressbar) {
    var $store, createMarkerAt, getHeightAndIncFromLatLng, loadImage, map, markers, polyline, queryAllHeightAndInc, visibleOnMap;
    // 初期化
    map = L.map("map");
    markers = []; // マーカー
    
    // マップを初期状態にする。
    map.resetDefaultLocation = function() {
      return this.setView([36.104611, 140.084556], 5);
    };
    // 全消去
    map.clearAll = function() {
      var j, len1, one;
      for (j = 0, len1 = markers.length; j < len1; j++) {
        one = markers[j];
        one.remove();
      }
      markers = [];
      return polyline.update();
    };
    // 一括読み込み
    map.load = function(data) {
      var $c, j, len1, m, one;
      this.clearAll();
      for (j = 0, len1 = data.length; j < len1; j++) {
        one = data[j];
        m = createMarkerAt(one);
        $c = $(m.getPopup().getContent());
        if (one.label != null) {
          $c.find("input.title").val(one.label);
        }
        if (one.y != null) {
          $c.find("input.height").val(one.y);
        }
        if (one.inc != null) {
          $c.find("span.inc").text(one.inc.toFixed(2));
        }
        markers.push(m);
      }
      return polyline.update();
    };
    
    map.getAllData = function(cb) {
      return queryAllHeightAndInc(function(m) {
        var i, one, wl;
        wl = 0;
        return cb((function() {
          var j, len1, results;
          results = [];
          for (i = j = 0, len1 = m.length; j < len1; i = ++j) {
            one = m[i];
            results.push({
              lat: one.getLatLng().lat,
              lng: one.getLatLng().lng,
              x: i === 0 ? 0 : wl += m[i - 1].getLatLng().distanceTo(one.getLatLng()),
              y: one.getHeight(),
              label: one.getTitle(),
              inc: one.getIncline()
            });
          }
          return results;
        })());
      });
    };
    //#--------------------------------------------------------------------
    //# privates
    //#--------------------------------------------------------------------
    $store = $(store); // 非表示の、キャンバス入れとく所
    
    // マーカーの作成
    createMarkerAt = function(latlng) {
      var $cont, m;
      $cont = $("<div><input type='text' class='title'></input><br> 緯度軽度: <span class='latlng'></span><br> 標高: <input type='text' class='height' val='N/A'></input>m<br> 傾斜: <span class='inc'>N/A</span><br> <button>削除</button></div>");
      m = L.marker(latlng, {
        riseOnHover: true,
        draggable: true
      }).bindPopup($cont[0]).on('click', function(e) {
        var $p, ll;
        ll = this.getLatLng();
        $p = $(this.getPopup().getContent());
        $p.find("span.latlng").text(`${ll.lat.toFixed(2)}, ${ll.lng.toFixed(2)}`);
        return this.queryHeightAndInc(function() {
          m.openPopup();
          return $p.find("input.title").focus();
        });
      }).on('drag', function(e) {
        return polyline.update();
      }).on('dragstart', function(e) {
        var j, len1, one, results;
        results = [];
        for (j = 0, len1 = markers.length; j < len1; j++) {
          one = markers[j];
          if (one !== this) {
            results.push(one.setOpacity(0));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }).on('dragend', function(e) {
        var j, len1, one, results;
        $cont = $(this.getPopup().getContent());
        $cont.find("input.height").val("N/A");
        $cont.find("span.inc").text("N/A");
        results = [];
        for (j = 0, len1 = markers.length; j < len1; j++) {
          one = markers[j];
          results.push(one.setOpacity(1.0));
        }
        return results;
      }).addTo(map);
      // 削除ボタン
      $cont.find("button").on("click", function(e) {
        markers = markers.filter((one) => {
          return one !== m;
        });
        m.remove();
        return polyline.update();
      });
      // テキストボックスで ESC を押したらバルーンを閉じる。
      $cont.find("input").on("keyup", function(e) {
        if (e.keyCode === 0x1b) {
          m.closePopup();
          return e.preventDefault();
        }
      });
      // バルーンのタイトルを得る。
      m.getTitle = function() {
        return $cont.find("input.title").val();
      };
      // バルーン内の標高を得る。
      m.getHeight = function() {
        var val;
        val = $cont.find("input.height").val();
        if (!val) {
          return Number.NaN;
        } else {
          return parseFloat(val);
        }
      };
      // バルーン内の傾斜を得る。
      m.getIncline = function() {
        return parseFloat($cont.find("span.inc").text());
      };
      // バルーンに標高値と傾斜を設定する。
      m.queryHeightAndInc = function(cb) {
        var height, inc;
        height = this.getHeight();
        inc = this.getIncline();
        if (isNaN(height) || isNaN(inc)) {
          return getHeightAndIncFromLatLng(this.getLatLng(), 15, function(h, i) {
            $cont.find("input.height").val(h.toFixed(2));
            $cont.find("span.inc").text(i.toFixed(2));
            return typeof cb === "function" ? cb(h, i) : void 0;
          });
        } else {
          return typeof cb === "function" ? cb(height, inc) : void 0;
        }
      };
      return m;
    };
    // ルートの赤い線
    polyline = L.polyline([], {
      color: 'red'
    }).addTo(map).on('click', function(e) {
      var crossBorder, idx, j, len1, m, nv21, nv31, one, p1, p2, p3, v21, v31;
      p2 = map.project(e.latlng);
      crossBorder = 18 / (map.getZoom() + 1);
      for (idx = j = 0, len1 = markers.length; j < len1; idx = ++j) {
        one = markers[idx];
        if (markers.length <= idx + 1) {
          break;
        }
        p1 = map.project(one.getLatLng());
        p3 = map.project(markers[idx + 1].getLatLng());
        v21 = p2.subtract(p1);
        v31 = p3.subtract(p1);
        nv21 = normalize(v21);
        nv31 = normalize(v31);
        if (calcLength(v21) < calcLength(v31) && 0 < getDotOf(v21, v31) && Math.abs(getCrossOf(nv31, nv21)) < crossBorder) {
          m = createMarkerAt(e.latlng);
          markers.splice(idx + 1, 0, m);
          polyline.update();
          break;
        }
      }
      return L.DomEvent.stopPropagation(e);
    });
    // ルートの更新
    polyline.update = function() {
      var m;
      return this.setLatLngs((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = markers.length; j < len1; j++) {
          m = markers[j];
          results.push(m.getLatLng());
        }
        return results;
      })());
    };
    // タイルが現在の map上で見えているか。
    // tile = {x: x, y: y, zoom: zoom}
    visibleOnMap = function(tile) {
      var br, mapB, ref, ref1, tl;
      mapB = map.getBounds();
      tl = getTileXYFromCoord(map.project(mapB.getNorthWest(), tile.zoom));
      br = getTileXYFromCoord(map.project(mapB.getSouthEast(), tile.zoom));
      return (tl.x <= (ref = tile.x) && ref <= br.x) && (tl.y <= (ref1 = tile.y) && ref1 <= br.y);
    };
    // urlの画像を読み込み、cb(img)を呼び出す。
    loadImage = function(z, url, cb, errorcb) {
      var $can, $img;
      $can = $store.children('canvas[src="' + url + '"]');
      if (0 < $can.length) {
        // console.log "do recycle #{url}"
        return cb($can[0]);
      } else {
        // console.log "start loading of #{url}"
        $img = $("<img>").attr("crossOrigin", "Anonymous").on("load", function(e) {
          var ctx, img;
          // console.log "load completed"
          img = e.target;
          $can = $("<canvas>").attr({
            width: img.width,
            height: img.height,
            src: img.src
          });
          ctx = $can[0].getContext('2d');
          ctx.drawImage(img, 0, 0);
          $store.append($can);
          return cb($can[0]);
        }).on("error", errorcb);
        $img.attr("src", url);
        // 古いのを削除する。
        return $store.children('canvas').each(function(idx) {
          var $t, u;
          $t = $(this);
          u = $t.attr("src");
          if (!visibleOnMap(getTileInfoFromURL(u))) {
            return $t.remove();
          }
        });
      }
    };
    // 標高と傾斜情報を得る。
    getHeightAndIncFromLatLng = function(latlng, zoom, cb) {
      var coord, p, url;
      coord = map.project(latlng, zoom);
      url = getDEMURLFromTileXY(getTileXYFromCoord(coord), zoom);
      p = getPointOnTileFromCoord(coord);
      return loadImage(zoom, url, function(canvas) {
        var h;
        h = getHeightFromRGB(getRGBFromImg(canvas, p));
        if (isNaN(h) && zoom === 15) {
          return getHeightAndIncFromLatLng(latlng, 14, cb);
        } else {
          return cb(h, getIncFromImg(canvas, p, zoom, latlng.lat));
        }
      }, function(e) { // 失敗したら10mBメッシュで取り直し。
        if (zoom < 15) {
          return cb(Number.NaN, 0);
        } else {
          return getHeightAndIncFromLatLng(latlng, 14, cb);
        }
      });
    };
    // マーカーに標高、傾斜を設定し、コールバックを呼び出す。
    queryAllHeightAndInc = function(cb) {
      var $bar, proc, progress, requestNext;
      progress = 0;
      $bar = $(progressbar);
      $bar.attr({
        max: markers.length,
        value: 0
      });
      requestNext = function() {
        return markers[progress].queryHeightAndInc(proc);
      };
      proc = function() {
        ++progress;
        $bar.val(progress);
        if (progress < markers.length) {
          return requestNext();
        } else {
          $bar.val(0);
          return cb(markers);
        }
      };
      return requestNext();
    };
    //#--------------------------------------------------------------------
    // マップ右下のリンクを出す。
    L.tileLayer('https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png', {
      attribution: '<a href="https://maps.gsi.go.jp/development/ichiran.html" target="_blank">地理院タイル</a>',
      maxZoom: 18
    }).addTo(map);
    // 地図上のクリックイベント
    map.on('click', function(e) {
      var m;
      m = createMarkerAt(e.latlng);
      markers.push(m);
      return polyline.update();
    });
    // 日本を表示する。
    map.resetDefaultLocation();
    return map;
  };

  //#==============================================================================
  //# jQuery 開始
  $(function() {
    var clearAll, closeHelp, map;
    // 説明画面
    closeHelp = function(e) {
      return $("#help").hide();
    };
    $(".closeHelp").on("click", closeHelp);
    if (needsHelp()) {
      nomoreHelp();
    } else {
      closeHelp();
    }
    // UIの設定
    $("#menu").hide();
    $("#openButton").on("click", function(e) {
      $(this).hide();
      return $("#menu").show();
    });
    $("#closeButton").on("click", function(e) {
      $("#menu").hide();
      return $("#openButton").show();
    });
    //#--------------------------------------------------------------------
    // マップの初期化
    map = createMap("#store", "#progressbar");
    // 全消去
    clearAll = function() {
      map.clearAll();
      return $("#svgcanvas").empty();
    };
    // データ作成する。
    $("#createData").on("click", function(e) {
      var sel;
      sel = ($("#dataFormat"))[0];
      switch (sel.options[sel.selectedIndex].value) {
        case "CSV":
          return map.getAllData(function(data) {
            var o;
            return $("#dataOutput").val(((function() {
              var j, len1, results;
              results = [];
              for (j = 0, len1 = data.length; j < len1; j++) {
                o = data[j];
                results.push(`${o.x.toFixed(2)}, ${o.y.toFixed(2)}, "${o.label}"`);
              }
              return results;
            })()).join("\r\n"));
          });
        case "JSON":
          return map.getAllData(function(data) {
            return $("#dataOutput").val(JSON.stringify(data));
          });
        case "SVG":
          $("#svgcanvas").empty();
          return map.getAllData(function(data) {
            $("#svgcanvas").append(makeSVG(data));
            return $("#dataOutput").val(makeSVGfile($("#svgcanvas")));
          });
      }
    });
    
    $("#clearAll").on("click", function(e) {
      return clearAll();
    });
    
    $("#loadData").on("click", function(e) {
      clearAll();
      return map.load(JSON.parse($("#dataOutput").val()));
    });
    
    return $("#showHelp").on("click", function(e) {
      return $("#help").show();
    });
  });

}).call(this);
